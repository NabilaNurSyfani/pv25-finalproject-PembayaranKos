# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'pembayaran_kos.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QFileDialog, QVBoxLayout
import csv
import sqlite3
import sys

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 750)
        MainWindow.setWindowTitle("Aplikasi Pembayaran Kos")
        self.init_db()

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.main_layout = QVBoxLayout(self.centralwidget)
        self.main_layout.setSpacing(15)
        self.main_layout.setContentsMargins(15, 15, 15, 15)

        self.formGroupBox = QtWidgets.QGroupBox("Data Pembayaran")
        self.formLayout = QtWidgets.QFormLayout()

        self.label_nama = QtWidgets.QLabel("Nama Penghuni:")
        self.lineEdit_nama = QtWidgets.QLineEdit()
        self.formLayout.addRow(self.label_nama, self.lineEdit_nama)
        
        self.label_kamar = QtWidgets.QLabel("No Kamar:")
        self.lineEdit_kamar = QtWidgets.QLineEdit()
        self.formLayout.addRow(self.label_kamar, self.lineEdit_kamar)
        
        self.label_bulan = QtWidgets.QLabel("Bulan:")
        self.comboBox_bulan = QtWidgets.QComboBox()
        self.comboBox_bulan.addItems(["Januari", "Februari", "Maret", "April", "Mei", "Juni", 
                                    "Juli", "Agustus", "September", "Oktober", "November", "Desember"])
        self.formLayout.addRow(self.label_bulan, self.comboBox_bulan)
        
        self.label_jumlah = QtWidgets.QLabel("Jumlah Pembayaran:")
        self.lineEdit_jumlah = QtWidgets.QLineEdit()
        self.formLayout.addRow(self.label_jumlah, self.lineEdit_jumlah)
        
        self.label_catatan = QtWidgets.QLabel("Catatan:")
        self.lineEdit_catatan = QtWidgets.QLineEdit()
        self.formLayout.addRow(self.label_catatan, self.lineEdit_catatan)
        
        self.tambahButton = QtWidgets.QPushButton("Tambah Pembayaran")
        self.tambahButton.setStyleSheet("""
            QPushButton {background-color: #4CAF50; color: white; border: none; padding: 8px 16px; font-weight: bold; border-radius: 4px;}
            QPushButton:hover {background-color: #45a049;}
        """)
        self.formLayout.addRow(self.tambahButton)
        
        self.formGroupBox.setLayout(self.formLayout)
        self.main_layout.addWidget(self.formGroupBox)

        self.searchGroupBox = QtWidgets.QGroupBox("Pencarian")
        self.searchLayout = QtWidgets.QHBoxLayout()
        
        self.searchLabel = QtWidgets.QLabel("Cari:")
        self.searchLineEdit = QtWidgets.QLineEdit()
        self.searchButton = QtWidgets.QPushButton("Search")
        self.searchButton.setStyleSheet("background-color: #2196F3; color: white;")
        
        self.searchLayout.addWidget(self.searchLabel)
        self.searchLayout.addWidget(self.searchLineEdit)
        self.searchLayout.addWidget(self.searchButton)
        
        self.searchGroupBox.setLayout(self.searchLayout)
        self.main_layout.addWidget(self.searchGroupBox)

        self.tableWidget = QtWidgets.QTableWidget()
        self.tableWidget.setColumnCount(6)
        self.tableWidget.setHorizontalHeaderLabels([
            "Nama Penghuni", "No Kamar", "Bulan", 
            "Jumlah Pembayaran", "Status", "Catatan"
        ])
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        self.tableWidget.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.tableWidget.customContextMenuRequested.connect(self.show_context_menu)
        self.main_layout.addWidget(self.tableWidget)

        self.footerLabel = QtWidgets.QLabel("Nabila Nur Syfani (F1D022082)")
        self.footerLabel.setAlignment(QtCore.Qt.AlignRight)
        self.main_layout.addWidget(self.footerLabel)
        
        MainWindow.setCentralWidget(self.centralwidget)
        
        self.menubar = MainWindow.menuBar()
        self.fileMenu = self.menubar.addMenu("&File")
        self.exportAction = QtWidgets.QAction("Ekspor ke CSV", MainWindow)
        self.fileMenu.addAction(self.exportAction)
        self.exitAction = QtWidgets.QAction("Exit", MainWindow)
        self.fileMenu.addAction(self.exitAction)

        self.editMenu = self.menubar.addMenu("&Edit")
        self.searchAction = QtWidgets.QAction("Search", MainWindow)
        self.editMenu.addAction(self.searchAction)

        self.statusbar = MainWindow.statusBar()
        
        self.tambahButton.clicked.connect(self.tambah_pembayaran)
        self.searchButton.clicked.connect(self.search_data)
        self.searchLineEdit.textChanged.connect(self.search_data)  
        self.searchAction.triggered.connect(self.focus_search)
        self.exportAction.triggered.connect(self.export_to_csv)
        self.exitAction.triggered.connect(MainWindow.close)
        self.load_data()

    def init_db(self):
        self.conn = sqlite3.connect('pembayaran_kos.db')
        self.cursor = self.conn.cursor()
        self.cursor.execute('''CREATE TABLE IF NOT EXISTS pembayaran (
                            id INTEGER PRIMARY KEY AUTOINCREMENT,
                            nama_penghuni TEXT NOT NULL,
                            no_kamar TEXT NOT NULL,
                            bulan TEXT NOT NULL,
                            jumlah_pembayaran REAL NOT NULL,
                            status TEXT NOT NULL,
                            catatan TEXT
                            )''')
        self.conn.commit()

    def load_data(self):
        self.tableWidget.setRowCount(0) 
        
        self.cursor.execute("SELECT nama_penghuni, no_kamar, bulan, jumlah_pembayaran, status, catatan FROM pembayaran")
        data = self.cursor.fetchall()
        
        for row_number, row_data in enumerate(data):
            self.tableWidget.insertRow(row_number)
            
            for column_number, column_data in enumerate(row_data[:5]):
                item = QtWidgets.QTableWidgetItem(str(column_data))
                self.tableWidget.setItem(row_number, column_number, item)

                if column_number == 4 and column_data == "Lunas":
                    item.setForeground(QtGui.QColor(0, 128, 0))
            self.tableWidget.setItem(row_number, 5, QtWidgets.QTableWidgetItem(str(row_data[5])))

    def tambah_pembayaran(self):
        nama = self.lineEdit_nama.text().strip()
        no_kamar = self.lineEdit_kamar.text().strip()
        bulan = self.comboBox_bulan.currentText()
        jumlah = self.lineEdit_jumlah.text().strip()
        catatan = self.lineEdit_catatan.text().strip()
        if not nama or not no_kamar or not jumlah:
            QMessageBox.warning(None, "Peringatan", "Nama, No Kamar, dan Jumlah Pembayaran harus diisi!")
            return    
        try:
            jumlah_num = float(jumlah)
        except ValueError:
            QMessageBox.warning(None, "Peringatan", "Jumlah Pembayaran harus angka!")
            return
        status = "Lunas"
        self.cursor.execute('''INSERT INTO pembayaran 
                                (nama_penghuni, no_kamar, bulan, jumlah_pembayaran, status, catatan)
                                VALUES (?, ?, ?, ?, ?, ?)''',
                                (nama, no_kamar, bulan, jumlah_num, status, catatan))
        self.conn.commit()
        self.load_data()
        self.lineEdit_nama.clear()
        self.lineEdit_kamar.clear()
        self.lineEdit_jumlah.clear()
        self.lineEdit_catatan.clear()

    def search_data(self):
        search_text = self.searchLineEdit.text().lower()
        if not search_text:
            for row in range(self.tableWidget.rowCount()):
                self.tableWidget.setRowHidden(row, False)
            return
        
        found = False
        for row in range(self.tableWidget.rowCount()):
            match = False
            for col in range(self.tableWidget.columnCount()):
                item = self.tableWidget.item(row, col)
                if item and search_text in item.text().lower():
                    match = True
                    break
                    
            self.tableWidget.setRowHidden(row, not match)
            if match:
                found = True
        if not found:
            QMessageBox.information(None, "Pencarian", "Data tidak ditemukan")

    def export_to_csv(self):
        if not self.tableWidget.rowCount():
            QMessageBox.warning(None, "Peringatan", "Tidak ada data untuk diekspor!")
            return
        fileName, _ = QFileDialog.getSaveFileName(
            None, "Simpan File CSV", "", "CSV Files (*.csv)")
        
        fileName = fileName if fileName.endswith('.csv') else fileName + '.csv'
        try:
            headers = [self.tableWidget.horizontalHeaderItem(col).text() 
                    for col in range(self.tableWidget.columnCount())]
            data = []
            for row in range(self.tableWidget.rowCount()):
                data.append([self.tableWidget.item(row, col).text() if self.tableWidget.item(row, col) else ""
                            for col in range(self.tableWidget.columnCount())])
            with open(fileName, 'w', newline='', encoding='utf-8') as f:
                csv.writer(f).writerow(headers)
                csv.writer(f).writerows(data)
            
            QMessageBox.information(None, "Sukses", f"Data berhasil diekspor ke {fileName}")
            
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Gagal mengekspor: {str(e)}")
            return
        
    def focus_search(self):
        self.searchLineEdit.setFocus()

    def closeEvent(self, event):
        self.conn.close()
        event.accept()

    def show_context_menu(self, position):
        menu = QtWidgets.QMenu()
        delete_action = menu.addAction("Hapus Data")
        
        action = menu.exec_(self.tableWidget.viewport().mapToGlobal(position))
        if action == delete_action:
            self.delete_selected_data()

    def delete_selected_data(self):
            selected_row = self.tableWidget.currentRow()
            nama_penghuni = self.tableWidget.item(selected_row, 0).text()
            
            reply = QMessageBox.question(
                None, 
                "Konfirmasi", 
                f"Apakah Anda yakin ingin menghapus data ini?",
                QMessageBox.Yes | QMessageBox.No, 
                QMessageBox.No
            )
            if reply == QMessageBox.Yes:
                try:
                    self.cursor.execute('''DELETE FROM pembayaran 
                                        WHERE nama_penghuni=?''',
                                        (nama_penghuni,))
                    self.conn.commit()
                    self.load_data()
                    QMessageBox.information(None, "Sukses", "Data berhasil dihapus!")
                except Exception as e:
                    QMessageBox.critical(None, "Error", f"Gagal menghapus data: {str(e)}")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())